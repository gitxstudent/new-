<?phpclass xgateway{	function seevn_xencode($encodeThis){		return $this->bin2hex($this->x128code($encodeThis,"ljrit"));	}	function seevn_xdecode($encodeThis){		return $this->x128code($this->hex2bin($encodeThis),"ljrit");	}	function x128code($data,$pwd)	{		$pwd_length = strlen($pwd);		for ($i = 0; $i < 255; $i++) {			$key[$i] = ord(substr($pwd, ($i % $pwd_length)+1, 1));			$counter[$i] = $i;		}		for ($i = 0; $i < 255; $i++) {			$x = ($x + $counter[$i] + $key[$i]) % 256;			$temp_swap = $counter[$i];			$counter[$i] = $counter[$x];			$counter[$x] = $temp_swap;		}		for ($i = 0; $i < strlen($data); $i++) {			$a = ($a + 1) % 256;			$j = ($j + $counter[$a]) % 256;			$temp = $counter[$a];			$counter[$a] = $counter[$j];			$counter[$j] = $temp;			$k = $counter[(($counter[$a] + $counter[$j]) % 256)];			$Zcipher = ord(substr($data, $i, 1)) ^ $k;			$Zcrypt .= chr($Zcipher);		}		return $Zcrypt;	}	function hex2bin($hexdata) {		for ($i=0;$i<strlen($hexdata);$i+=2) {			$bindata.=chr(hexdec(substr($hexdata,$i,2)));		}  		return $bindata;	}  	function xcurl($url,$referer,$post,$cookie,$agent,$Socks=''){		$curl = curl_init();		curl_setopt($curl,	CURLOPT_URL,$url);		curl_setopt($curl,	CURLOPT_RETURNTRANSFER, TRUE);		//curl_setopt($curl,	CURLOPT_COOKIESESSION, TRUE);		curl_setopt($curl,	CURLOPT_AUTOREFERER, TRUE);		curl_setopt($curl,	CURLOPT_FOLLOWLOCATION, TRUE);		curl_setopt($curl,	CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($curl,	CURLOPT_NOBODY, FALSE);		curl_setopt($curl,	CURLOPT_SSL_VERIFYHOST, TRUE);		curl_setopt($curl,	CURLOPT_CONNECTTIMEOUT,0);		curl_setopt($curl, CURLOPT_HTTPHEADER,array("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","Accept-Language: en-us,en;q=0.5","Accept-Charset: UTF-8,*","Keep-Alive: 10000","Connection: keep-alive","Cookie: __utma=17238630.411232381.1297212924.1297212924.1297212924.1; __utmz=17238630.1297212924.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)","Cache-Control: max-age=0" ));		if($agent == "IE") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)');		if($agent == "FF") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.6.11');		if($agent == "OP") curl_setopt($curl,CURLOPT_USERAGENT,'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.2.15 Version/10.10');		if($agent == "SF") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10');		if($agent == "CH") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.1.249.1042 Safari/532.5');		if($agent == "IP") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16');		if($agent == "IT") curl_setopt($curl,CURLOPT_USERAGENT,'iTunes/9.1 (Macintosh; U; PPC Mac OS X 10.2)');		if($agent == "WM") curl_setopt($curl,CURLOPT_USERAGENT,'NSPlayer/12.00.7600.16385 WMFSDK/12.00.7600.16385');		if($agent == "GG") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)');		if(strlen($agent) > 2) curl_setopt($curl,CURLOPT_USERAGENT,$agent);		if(is_dir('cookiefile') === false) mkdir(getcwd() . '/cookiefile', 0777);		curl_setopt($curl,CURLOPT_COOKIEJAR,getcwd() . '/cookiefile/'.pathinfo($_SERVER['SCRIPT_NAME'],PATHINFO_BASENAME).'.cookie.txt');		if(!empty($cookie)) curl_setopt($curl,CURLOPT_COOKIEJAR,getcwd() . '/cookiefile/'. $cookie);		curl_setopt($curl,CURLOPT_COOKIEFILE,getcwd() . '/cookiefile/'.pathinfo($_SERVER['SCRIPT_NAME'],PATHINFO_BASENAME).'.cookie.txt');		if(!empty($cookie)) curl_setopt($curl,CURLOPT_COOKIEFILE,getcwd() . '/cookiefile/'.$cookie);		if(!empty($referer)) curl_setopt($curl,CURLOPT_REFERER,$referer);		if(!empty($post)) curl_setopt($curl,CURLOPT_POSTFIELDS,$post);		if(!empty($Socks)){		curl_setopt($curl, CURLOPT_HTTPPROXYTUNNEL, 1);		curl_setopt($curl, CURLOPT_PROXY, $Socks);		curl_setopt($curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);		curl_setopt($curl, CURLOPT_DNS_CACHE_TIMEOUT,1);		}		$curl_data = curl_exec($curl);		curl_close($curl);		return $curl_data;	}	function xcurl_header($url,$referer,$post,$cookie,$agent,$Socks=''){		$curl = curl_init();		curl_setopt($curl,	CURLOPT_URL,$url);		curl_setopt($curl,	CURLOPT_RETURNTRANSFER, TRUE);		curl_setopt($curl,	CURLOPT_AUTOREFERER, TRUE);		curl_setopt($curl,	CURLOPT_FOLLOWLOCATION, FALSE);		curl_setopt($curl,	CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($curl,	CURLOPT_NOBODY, TRUE);		curl_setopt($curl,	CURLOPT_SSL_VERIFYHOST, TRUE);		curl_setopt($curl,	CURLOPT_HEADER,         true);		curl_setopt($curl,	CURLOPT_CONNECTTIMEOUT,0);		if($agent == "IE") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)');		if($agent == "FF") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.6.11');		if($agent == "OP") curl_setopt($curl,CURLOPT_USERAGENT,'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.2.15 Version/10.10');		if($agent == "SF") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10');		if($agent == "CH") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.1.249.1042 Safari/532.5');		if($agent == "IP") curl_setopt($curl,CURLOPT_USERAGENT,'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16');		if($agent == "IT") curl_setopt($curl,CURLOPT_USERAGENT,'iTunes/9.1 (Macintosh; U; PPC Mac OS X 10.2)');		if($agent == "WM") curl_setopt($curl,CURLOPT_USERAGENT,'NSPlayer/12.00.7600.16385 WMFSDK/12.00.7600.16385');		if(is_dir('cookiefile') === false) mkdir(getcwd() . '/cookiefile', 0777);		curl_setopt($curl,CURLOPT_COOKIEJAR,getcwd() . '/cookiefile/'.pathinfo($_SERVER['SCRIPT_NAME'],PATHINFO_BASENAME).'.cookie.txt');		if(!empty($cookie)) curl_setopt($curl,CURLOPT_COOKIEJAR,getcwd() . '/cookiefile/'. $cookie);		curl_setopt($curl,CURLOPT_COOKIEFILE,getcwd() . '/cookiefile/'.pathinfo($_SERVER['SCRIPT_NAME'],PATHINFO_BASENAME).'.cookie.txt');		if(!empty($cookie)) curl_setopt($curl,CURLOPT_COOKIEFILE,getcwd() . '/cookiefile/'.$cookie);		if(!empty($referer)) curl_setopt($curl,CURLOPT_REFERER,$referer);		if(!empty($post)) curl_setopt($curl,CURLOPT_POSTFIELDS,$post);		if(!empty($Socks)){		curl_setopt($curl, CURLOPT_HTTPPROXYTUNNEL, 1);		curl_setopt($curl, CURLOPT_PROXY, $Socks);		curl_setopt($curl, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);		curl_setopt($curl, CURLOPT_DNS_CACHE_TIMEOUT,1);		}		$curl_data = curl_getinfo($curl);		$curl_exec = curl_exec($curl);		$var1 = explode("\n",$curl_exec);		foreach($var1 as $var2){			list($key,$value) = explode(": ",$var2);			$key = strtolower(trim($key));			$value = trim($value);			$curl_data[$key] = $value;		}		curl_close($curl);		return $curl_data;	}	function multi($num, $perpage, $curpage, $mpurl, $phpurl=1) {		global $_SHTML, $lang, $_SGLOBAL;		if(($curpage-1)*$perpage > $num);			$maxpages = $_SGLOBAL['maxpages'];		$multipage = $a_name = '';		if($phpurl) {			$mpurl .= strpos($mpurl, '?') ? '&' : '?';		} else {			$urlarr = $mpurl;			unset($urlarr['php']);			unset($urlarr['modified']);		}		if($num > $perpage) {			$page = 10;			$offset = 2;			$realpages = @ceil($num / $perpage);			$pages = $maxpages && $maxpages < $realpages ? $maxpages : $realpages;			if($page > $pages) {				$from = 1;				$to = $pages;			} else {				$from = $curpage - $offset;				$to = $curpage + $page - $offset - 1;				if($from < 1) {					$to = $curpage + 1 - $from;					$from = 1;					if(($to - $from) < $page && ($to - $from) < $pages) {						$to = $page;					}				} elseif($to > $pages) {					$from = $curpage - $pages + $to;					$to = $pages;					if(($to - $from) < $page && ($to - $from) < $pages) {						$from = $pages - $page + 1;					}				}			}			if($phpurl) {				$url = $mpurl.'page=1'.$a_name;				$url2 = $mpurl.'page='.($curpage - 1).$a_name;			} else {				$urlarr['page'] = 1;				$url = geturl(arraytostring($urlarr)).$a_name;				$urlarr['page'] = $curpage - 1;				$url2 = geturl(arraytostring($urlarr)).$a_name;			}			$multipage = '<div class="pages"><div>'.($curpage - $offset > 1 && $pages > $page ? '<a href="'.$url.'">1</a>' : '').($curpage > 1 ? '<a class="prev" href="'.$url2.'">&lt;</a>' : '');			for($i = $from; $i <= $to; $i++) {				if($phpurl) {					$url = $mpurl.'page='.$i.$a_name;				} else {					$urlarr['page'] = $i;					if($urlarr['page'] == 1) unset($urlarr['page']);					$url = geturl(arraytostring($urlarr)).$a_name;				}				$multipage .= $i == $curpage ? '<a href="javascript:void(0)" class="current_page">'.$i.'</a> ' : '<a href="'.$url.'">'.$i.'</a>';			}			if($phpurl) {				$url = $mpurl.'page='.($curpage + 1).$a_name;				$url2 = $mpurl.'page='.$pages.$a_name;			} else {				$urlarr['page'] = $curpage + 1;				if($urlarr['page'] == 1) unset($urlarr['page']);				$url = geturl(arraytostring($urlarr)).$a_name;				$urlarr['page'] = $pages;				if($urlarr['page'] == 1) unset($urlarr['page']);				$url2 = geturl(arraytostring($urlarr)).$a_name;			}			$multipage .= ($to < $pages && $curpage < $maxpages ? '<a href="'.$url2.'" target="_self"> '.$realpages.'</a>' : ' ').				($curpage < $pages ? '<a class="next" href="'.$url.'">&gt;</a>' : ' ').				($pages > $page ? '' : '');			$multipage .= '</div></div>';			}		return $multipage;	}	function xml2array($contents, $get_attributes=1, $priority = 'tag') {			if(!$contents) return array();			if(!function_exists('xml_parser_create')) {			return array();			}			$parser = xml_parser_create('');			xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8");			xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);			xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);			xml_parse_into_struct($parser, trim($contents), $xml_values);			xml_parser_free($parser);			if(!$xml_values) return;			$xml_array = array();			$parents = array();			$opened_tags = array();			$arr = array();			$current = &$xml_array;			$repeated_tag_index = array();			foreach($xml_values as $data) {				unset($attributes,$value);				extract($data);				$result = array();				$attributes_data = array();								if(isset($value)) {					if($priority == 'tag') $result = $value;					else $result['value'] = $value;				}				if(isset($attributes) and $get_attributes) {					foreach($attributes as $attr => $val) {						if($priority == 'tag') $attributes_data[$attr] = $val;						else $result['attr'][$attr] = $val;					}				}				if($type == "open") {					$parent[$level-1] = &$current;					if(!is_array($current) or (!in_array($tag, array_keys($current)))) { 						$current[$tag] = $result;						if($attributes_data) $current[$tag. '_attr'] = $attributes_data;						$repeated_tag_index[$tag.'_'.$level] = 1;						$current = &$current[$tag];					} else {						if(isset($current[$tag][0])) {							$current[$tag][$repeated_tag_index[$tag.'_'.$level]] = $result;							$repeated_tag_index[$tag.'_'.$level]++;						} else {							$current[$tag] = array($current[$tag],$result);							$repeated_tag_index[$tag.'_'.$level] = 2;														if(isset($current[$tag.'_attr'])) {								$current[$tag]['0_attr'] = $current[$tag.'_attr'];								unset($current[$tag.'_attr']);							}						}						$last_item_index = $repeated_tag_index[$tag.'_'.$level]-1;						$current = &$current[$tag][$last_item_index];					}				} elseif($type == "complete") {					if(!isset($current[$tag])) {						$current[$tag] = $result;						$repeated_tag_index[$tag.'_'.$level] = 1;						if($priority == 'tag' and $attributes_data) $current[$tag. '_attr'] = $attributes_data;					} else { 						if(isset($current[$tag][0]) and is_array($current[$tag])) {							$current[$tag][$repeated_tag_index[$tag.'_'.$level]] = $result;														if($priority == 'tag' and $get_attributes and $attributes_data) {								$current[$tag][$repeated_tag_index[$tag.'_'.$level] . '_attr'] = $attributes_data;							}							$repeated_tag_index[$tag.'_'.$level]++;						} else {							$current[$tag] = array($current[$tag],$result);							$repeated_tag_index[$tag.'_'.$level] = 1;							if($priority == 'tag' and $get_attributes) {								if(isset($current[$tag.'_attr'])) {																		$current[$tag]['0_attr'] = $current[$tag.'_attr'];									unset($current[$tag.'_attr']);								}																if($attributes_data) {									$current[$tag][$repeated_tag_index[$tag.'_'.$level] . '_attr'] = $attributes_data;								}							}							$repeated_tag_index[$tag.'_'.$level]++;						}					}				} elseif($type == 'close') {					$current = &$parent[$level-1];				}			}		return($xml_array);	}	function array2xml($array, $level=1) {			$xml = '';	   // if ($level==1) {	   //     $xml .= "<array>\n";	   // }		foreach ($array as $key=>$value) {			$key = strtolower($key);			if (is_object($value)) {$value=get_object_vars($value);}// convert object to array						if (is_array($value)) {				$multi_tags = false;				foreach($value as $key2=>$value2) {				 if (is_object($value2)) {$value2=get_object_vars($value2);} // convert object to array					if (is_array($value2)) {						$xml .= str_repeat("\t",$level)."<$key>\n";						$xml .= array2xml($value2, $level+1);						$xml .= str_repeat("\t",$level)."</$key>\n";						$multi_tags = true;					} else {						if (trim($value2)!='') {							if (htmlspecialchars($value2)!=$value2) {								$xml .= str_repeat("\t",$level).										"<$key2><![CDATA[$value2]]>". // changed $key to $key2... didn't work otherwise.										"</$key2>\n";							} else {								$xml .= str_repeat("\t",$level).										"<$key2>$value2</$key2>\n"; // changed $key to $key2							}						}						$multi_tags = true;					}				}				if (!$multi_tags and count($value)>0) {					$xml .= str_repeat("\t",$level)."<$key>\n";					$xml .= array_to_xml($value, $level+1);					$xml .= str_repeat("\t",$level)."</$key>\n";				}		  			 } else {				if (trim($value)!='') {				 echo "value=$value<br>";					if (htmlspecialchars($value)!=$value) {						$xml .= str_repeat("\t",$level)."<$key>".								"<![CDATA[$value]]></$key>\n";					} else {						$xml .= str_repeat("\t",$level).								"<$key>$value</$key>\n";					}				}			}		}	   //if ($level==1) {		//    $xml .= "</array>\n";	   // }		return $xml;	}	function parse_url_query($var,$select=0)	{	  $var  = parse_url($var, PHP_URL_QUERY);	  $var  = html_entity_decode($var);	  $var  = explode('&', $var);	  $arr  = array();	  foreach($var as $val)	   {		$x          = explode('=', $val);		$arr[$x[0]] = $x[1];	   }	  unset($val, $x, $var);	  $return = !empty($select)?$arr[$select]:$arr;	  return $return;	}	function seo_url_utf($s) {		$c = array (' ','-','/','\\',',','.','#',':',';','\'','"','[',']','{','}',')','(','|','`','~','!','@','%','$','^','&','*','=','?','+');		$s = str_replace($c, ' ',trim($s));		$s = trim($s);		$s = rawurlencode($s);		$s = str_replace("%20","-",$s);		$s = ereg_replace("[-]+",'-', $s);		$s = strtolower($s);		return $s;	}	function html_remove_blankline($s){		return preg_replace('/^[ \t]*[\r\n]+/m', '',$s);	}		function cutstr($string, $length, $havedot=0) {    global $_SCONFIG;    if (strlen($string) <= $length) {        return $string;    }    $wordscut = '';        $n = 0;        $tn = 0;        $noc = 0;        while ($n < strlen($string)) {            $t = ord($string[$n]);            if ($t == 9 || $t == 10 || (32 <= $t && $t <= 126)) {                $tn = 1;                $n++;                $noc++;            } elseif (194 <= $t && $t <= 223) {                $tn = 2;                $n += 2;                $noc += 2;            } elseif (224 <= $t && $t < 239) {                $tn = 3;                $n += 3;                $noc += 2;            } elseif (240 <= $t && $t <= 247) {                $tn = 4;                $n += 4;                $noc += 2;            } elseif (248 <= $t && $t <= 251) {                $tn = 5;                $n += 5;                $noc += 2;            } elseif ($t == 252 || $t == 253) {                $tn = 6;                $n += 6;                $noc += 2;            } else {                $n++;            }            if ($noc >= $length) {                break;            }        }        if ($noc > $length) {            $n -= $tn;        }        $wordscut = substr($string, 0, $n);        if ($havedot) {        return $wordscut . '...';    } else {        return $wordscut . ' ';    }	}		}